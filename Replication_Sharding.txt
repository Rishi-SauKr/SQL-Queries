In large-scale system, Database is the common bottleneck,
To ensure that our large-scale system remains fast and reliable, we can use two Techniques:-
DATABASE REPLICATION
DATABASE SHARDING

Database Replication - creating copies of the database in different server, so even if one server is down 
we can access data from other servers.
This ensure High Availbility and also scales read capability of the database.
How Replication works?
1.Leader-follower Replication - we have one master database and other slaves databases,write operation is directed to
the leader which then propagates it to the other databases and read operation is directed to all the databases which increases read capacity.

2.Leader-Leader Replication
Here all the databases act as leader and each of them can accept read/write operations.In this case, we may have 
conflicts between leader databases and we must have some conflict resolution mechanism to handle conflicts.

This operations can be async or sync:-
Async operation Syncs in background, faster than sync operation,can cause temporary data inconsistencies
Leader and Follower are updated simultaneously,Guarantees consistency and impacts write performance.

Scaling Writes in leader-leader Replication
More complex as conflicts may arise due write operation in two different leader database.For this we require conflict resolution
mechanism.
conflict resolution mechanism types:-
1.Timestamp-based resolution: The update with the latest timestamp wins.
2.Last-write-wins: The most recent write ,regardless of timestamp,overrides previous ones.
3.Custom conflict resolution logic: Application-specific rules.

SHARDING
When a database grows massive such that even single server might struggle to handle stoarge and processing demands.
Sharding tackles this by distributing the data across multiple servers known as shards.
e.g. Tables may be sharded by primary key or in case of a E-commerce website using region column.
Shard keys determine how data is assigned to different shards.
Advanatges:-
1.Improves query performance - as we have to search for data in a shard that has less no. of rows.
2.Avoid total service outage - as one shard becomes unavailable, data can be accessed from other shards.
3.Helps horizontally scaling also you can add shards at runtime without without shutting down for maintainance.

Types:- 
Range based Sharding - data is partitioned using ranges of the shard keys.may result in uneven distribution of data across shards rsulting in hotspots[A shard containing more data than other shards]
Hash-based Sharding - Hash function is appled to the shard key which determines in which shard the data is.This is less
                    efficient as compared to range queries to find data we may have to query all shards.
Directory Sharding - Here we have a lookup table which determines to which shard the data goes into. Downtime if lookup table is unavailable.
GeoSharding - based on the physical geolocation associated with the record.e.g. dating sites stores users in different shards based on loc. may result in hotspots
SQL based databases don't offer Sharding out odf the box VS. NoSQL databases have build in Sharding support.
Sharding enables horizontal scaling by distributing data across multiple servers